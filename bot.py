import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7582181232:AAHq281v3UmM19PFbzm6aKTuxqWm0VOSON4'
ADMIN_ID = 821813435  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
if not os.path.exists('data'):
    os.makedirs('data')
if not os.path.exists('data/files'):
    os.makedirs('data/files')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('data/bot_database.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS notes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    content TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS files (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    file_id TEXT,
    file_name TEXT,
    file_type TEXT,
    caption TEXT,
    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    note_title = State()
    note_content = State()
    edit_note = State()
    edit_note_content = State()
    file_upload = State()
    file_caption = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id):
    return user_id == ADMIN_ID

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton('üìù –ó–∞–º–µ—Ç–∫–∏'))
    menu.add(KeyboardButton('üìÅ –§–∞–π–ª—ã'))
    return menu

# –ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫
def get_notes_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton('üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫'))
    menu.add(KeyboardButton('‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞'))
    menu.add(KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    return menu

# –ú–µ–Ω—é —Ñ–∞–π–ª–æ–≤
def get_files_menu():
    menu = ReplyKeyboardMarkup(resize_keyboard=True)
    menu.add(KeyboardButton('üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤'))
    menu.add(KeyboardButton('‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'))
    menu.add(KeyboardButton('üîô –ù–∞–∑–∞–¥'))
    return menu

# –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
def get_cancel_button():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞'))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
        return
    
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def cmd_back(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º–µ—Ç–∫–∏"
@dp.message_handler(lambda message: message.text == 'üìù –ó–∞–º–µ—Ç–∫–∏')
async def cmd_notes(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("–ú–µ–Ω—é –∑–∞–º–µ—Ç–æ–∫:", reply_markup=get_notes_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–§–∞–π–ª—ã"
@dp.message_handler(lambda message: message.text == 'üìÅ –§–∞–π–ª—ã')
async def cmd_files(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    await message.answer("–ú–µ–Ω—é —Ñ–∞–π–ª–æ–≤:", reply_markup=get_files_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫"
@dp.message_handler(lambda message: message.text == 'üìã –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫')
async def cmd_notes_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    cursor.execute('SELECT id, title FROM notes WHERE user_id = ? ORDER BY created_at DESC', (message.from_user.id,))
    notes = cursor.fetchall()
    
    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return
    
    keyboard = InlineKeyboardMarkup()
    for note in notes:
        keyboard.add(InlineKeyboardButton(note[1], callback_data=f'view_note_{note[0]}'))
    
    await message.answer("–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞"
@dp.message_handler(lambda message: message.text == '‚ûï –ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞')
async def cmd_new_note(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    await Form.note_title.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", reply_markup=get_cancel_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∞', state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return
    
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.finish()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=Form.note_title)
async def process_note_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['note_title'] = message.text
    
    await Form.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=Form.note_content)
async def process_note_content(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        title = data['note_title']
        content = message.text
        
        cursor.execute('INSERT INTO notes (user_id, title, content) VALUES (?, ?, ?)', 
                      (message.from_user.id, title, content))
        conn.commit()
        
        await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=get_main_menu())
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('view_note_'))
async def callback_view_note(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        return
    
    note_id = callback_query.data.split('_')[-1]
    
    cursor.execute('SELECT title, content FROM notes WHERE id = ? AND user_id = ?', 
                  (note_id, callback_query.from_user.id))
    note = cursor.fetchone()
    
    if note:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_note_{note_id}'))
        keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_note_{note_id}'))
        
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, 
                             f"üìå <b>{note[0]}</b>\n\n{note[1]}", 
                             parse_mode='HTML', 
                             reply_markup=keyboard)
    else:
        await bot.answer_callback_query(callback_query.id, "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('edit_note_'))
async def callback_edit_note(callback_query: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback_query.from_user.id):
        return
    
    note_id = callback_query.data.split('_')[-1]
    
    async with state.proxy() as data:
        data['note_id'] = note_id
    
    await Form.edit_note_content.set()
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 
                          "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏:", 
                          reply_markup=get_cancel_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–º–µ—Ç–∫–∏
@dp.message_handler(state=Form.edit_note_content)
async def process_edit_note_content(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        note_id = data['note_id']
        new_content = message.text
        
        cursor.execute('UPDATE notes SET content = ? WHERE id = ? AND user_id = ?', 
                      (new_content, note_id, message.from_user.id))
        conn.commit()
        
        cursor.execute('SELECT title FROM notes WHERE id = ?', (note_id,))
        title = cursor.fetchone()[0]
        
        await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ '{title}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_main_menu())
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
@dp.callback_query_handler(lambda c: c.data.startswith('delete_note_'))
async def callback_delete_note(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        return
    
    note_id = callback_query.data.split('_')[-1]
    
    cursor.execute('SELECT title FROM notes WHERE id = ? AND user_id = ?', 
                  (note_id, callback_query.from_user.id))
    note = cursor.fetchone()
    
    if note:
        cursor.execute('DELETE FROM notes WHERE id = ?', (note_id,))
        conn.commit()
        
        await bot.answer_callback_query(callback_query.id, f"–ó–∞–º–µ—Ç–∫–∞ '{note[0]}' —É–¥–∞–ª–µ–Ω–∞")
        await bot.send_message(callback_query.from_user.id, 
                             "–ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.", 
                             reply_markup=get_main_menu())
    else:
        await bot.answer_callback_query(callback_query.id, "–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
@dp.message_handler(lambda message: message.text == 'üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤')
async def cmd_files_list(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    cursor.execute('SELECT id, file_name, file_type FROM files WHERE user_id = ? ORDER BY uploaded_at DESC', 
                  (message.from_user.id,))
    files = cursor.fetchall()
    
    if not files:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
        return
    
    keyboard = InlineKeyboardMarkup()
    for file in files:
        keyboard.add(InlineKeyboardButton(f"{file[1]} ({file[2]})", callback_data=f'view_file_{file[0]}'))
    
    await message.answer("–í–∞—à–∏ —Ñ–∞–π–ª—ã:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"
@dp.message_handler(lambda message: message.text == '‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª')
async def cmd_upload_file(message: types.Message):
    if not is_admin(message.from_user.id):
        return
    
    await Form.file_upload.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=get_cancel_button())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
@dp.message_handler(content_types=['document', 'photo', 'video', 'audio'], state=Form.file_upload)
async def process_file_upload(message: types.Message, state: FSMContext):
    file_id = None
    file_name = None
    file_type = None
    
    if message.document:
        file_id = message.document.file_id
        file_name = message.document.file_name
        file_type = message.document.mime_type
    elif message.photo:
        file_id = message.photo[-1].file_id
        file_name = f"photo_{file_id}.jpg"
        file_type = "image/jpeg"
    elif message.video:
        file_id = message.video.file_id
        file_name = message.video.file_name if message.video.file_name else f"video_{file_id}.mp4"
        file_type = message.video.mime_type
    elif message.audio:
        file_id = message.audio.file_id
        file_name = message.audio.file_name if message.audio.file_name else f"audio_{file_id}.mp3"
        file_type = message.audio.mime_type
    
    if file_id:
        async with state.proxy() as data:
            data['file_id'] = file_id
            data['file_name'] = file_name
            data['file_type'] = file_type
        
        await Form.next()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):", 
                            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True)
                            .add(KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'))
                            .add(KeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞')))
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–∞–π–ª–∞
@dp.message_handler(state=Form.file_caption)
async def process_file_caption(message: types.Message, state: FSMContext):
    caption = message.text if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else None
    
    async with state.proxy() as data:
        file_id = data['file_id']
        file_name = data['file_name']
        file_type = data['file_type']
        
        cursor.execute('INSERT INTO files (user_id, file_id, file_name, file_type, caption) VALUES (?, ?, ?, ?, ?)', 
                      (message.from_user.id, file_id, file_name, file_type, caption))
        conn.commit()
        
        await message.answer(f"–§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", reply_markup=get_main_menu())
    
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–∞
@dp.callback_query_handler(lambda c: c.data.startswith('view_file_'))
async def callback_view_file(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        return
    
    file_id = callback_query.data.split('_')[-1]
    
    cursor.execute('SELECT file_id, file_name, file_type, caption FROM files WHERE id = ? AND user_id = ?', 
                  (file_id, callback_query.from_user.id))
    file_data = cursor.fetchone()
    
    if file_data:
        file_id, file_name, file_type, caption = file_data
        caption_text = f"üìÑ <b>{file_name}</b>\n\n{caption if caption else '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_file_{file_id}'))
        
        try:
            if file_type.startswith('image'):
                await bot.send_photo(callback_query.from_user.id, file_id, caption=caption_text, 
                                   parse_mode='HTML', reply_markup=keyboard)
            elif file_type.startswith('video'):
                await bot.send_video(callback_query.from_user.id, file_id, caption=caption_text, 
                                   parse_mode='HTML', reply_markup=keyboard)
            elif file_type.startswith('audio'):
                await bot.send_audio(callback_query.from_user.id, file_id, caption=caption_text, 
                                   parse_mode='HTML', reply_markup=keyboard)
            else:
                await bot.send_document(callback_query.from_user.id, file_id, caption=caption_text, 
                                      parse_mode='HTML', reply_markup=keyboard)
        except Exception as e:
            await bot.send_message(callback_query.from_user.id, 
                                 f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª. –û—à–∏–±–∫–∞: {str(e)}")
        
        await bot.answer_callback_query(callback_query.id)
    else:
        await bot.answer_callback_query(callback_query.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
@dp.callback_query_handler(lambda c: c.data.startswith('delete_file_'))
async def callback_delete_file(callback_query: types.CallbackQuery):
    if not is_admin(callback_query.from_user.id):
        return
    
    file_db_id = callback_query.data.split('_')[-1]
    
    cursor.execute('SELECT file_name FROM files WHERE id = ? AND user_id = ?', 
                  (file_db_id, callback_query.from_user.id))
    file_data = cursor.fetchone()
    
    if file_data:
        cursor.execute('DELETE FROM files WHERE id = ?', (file_db_id,))
        conn.commit()
        
        await bot.answer_callback_query(callback_query.id, f"–§–∞–π–ª '{file_data[0]}' —É–¥–∞–ª–µ–Ω")
        await bot.send_message(callback_query.from_user.id, 
                             "–§–∞–π–ª —É–¥–∞–ª–µ–Ω.", 
                             reply_markup=get_main_menu())
    else:
        await bot.answer_callback_query(callback_query.id, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)